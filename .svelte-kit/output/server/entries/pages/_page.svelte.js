import { c as create_ssr_component, a as subscribe, o as onDestroy, v as validate_component, b as add_attribute, e as escape } from "../../chunks/ssr.js";
import "mitt";
import { W as WebcamVideo, I as ImageSequence } from "../../chunks/ImageSequence.js";
import { w as win } from "../../chunks/store.js";
import "@mediapipe/tasks-vision";
import "tweakpane";
import howler from "howler";
async function stopRecognition() {
}
const css$1 = {
  code: ":root{--black:#181818;--black2:#4b4b4b;--white:#f7f7f7}canvas.svelte-1ilcoqd.svelte-1ilcoqd{background-color:transparent;height:100vh;height:-webkit-fill-available;left:0;top:0;width:100vw;z-index:3}.video-container.svelte-1ilcoqd.svelte-1ilcoqd,canvas.svelte-1ilcoqd.svelte-1ilcoqd{pointer-events:none;position:absolute}.video-container.svelte-1ilcoqd.svelte-1ilcoqd{--rotation:0deg;box-shadow:4px 4px 40px 0 rgba(0,0,0,.1),4px 11px 10px 0 rgba(0,0,0,.1);height:50vh;left:var(--pos-x);overflow:hidden;top:var(--pos-y);transform:translate(-50%,-50%);width:50vh;z-index:2}.video-container.svelte-1ilcoqd .sequence.svelte-1ilcoqd{position:absolute;--pos-x:20%;--pos-y:20%;height:calc(100% + var(--pos-y)*2);left:calc(var(--pos-x)*-1);top:calc(var(--pos-y)*-1);transform:translate(-50%,-50%);transform:rotate(var(--rotation));transform-origin:50% 50%;width:calc(100% + var(--pos-x)*2)}#enable-webcam.svelte-1ilcoqd.svelte-1ilcoqd{align-items:center;-webkit-backdrop-filter:blur(50px);backdrop-filter:blur(50px);background-color:rgba(0,0,0,.5);cursor:pointer;display:flex;height:100vh;height:-webkit-fill-available;justify-content:center;left:0;pointer-events:auto;position:absolute;top:0;width:100vw;z-index:4}#enable-webcam.svelte-1ilcoqd .button.svelte-1ilcoqd{background-color:#ddd;border-radius:5px;color:#222;font-size:1.5rem;padding:10px 20px;transition:all .3s ease}#enable-webcam.svelte-1ilcoqd:hover .button.svelte-1ilcoqd{background-color:#fff;color:#222}",
  map: `{"version":3,"file":"Scene.svelte","sources":["Scene.svelte"],"sourcesContent":["<script>\\n\\timport {onMount, onDestroy} from 'svelte'\\n\\timport { win } from '$lib/store'\\n\\n\\t// -\\n\\timport WebcamVideo from '$lib/WebcamVideo.svelte'\\n\\timport ImageSequence from '$lib/ImageSequence.svelte'\\n\\timport { startRecognition, stopRecognition } from '$lib/mediapipe/recognizer'\\n\\timport { Pane } from \\"tweakpane\\";\\n\\n\\timport howler from 'howler';\\n\\tconst Howl = howler.Howl;\\n\\tlet sound = null;\\n\\tlet soundDuration = 0;\\n\\tlet volume = 0;\\n\\n\\t// -\\n\\tlet canvasEl = null;\\n\\tlet canvasCtx = null;\\n\\n\\tlet webCamElem = null;\\n\\tlet buttonElem = null;\\n\\n\\n\\tlet isWebcamEnabled = false;\\n\\t\\n\\tlet raf = null;\\n\\n\\tlet videoElem = null;\\n\\tlet sequenceElem = null;\\n\\tlet framePercent = 0;\\n\\tlet frame = 0;\\n\\tconst totalFrames = 105;\\n\\tconst minDistance = 30;\\n\\tconst maxDistance = 400;\\n\\tconst distanceMultiplier = 1;\\n\\tlet rotation = 0;\\n\\tlet position = {\\n\\t\\tx: 0,\\n\\t\\ty: 0\\n\\t}\\n\\n\\t$: if (isWebcamEnabled) {\\n\\t\\tstartRecognition( webCamElem, render );\\n\\t}\\n\\t// -\\n\\tlet params = {\\n\\t\\tvel: 0.2,\\n\\t\\tmaxVel: 0.2,\\n\\t\\tminVel: 0.04,\\n\\t\\ttranslate: true,\\n\\t\\trotate: true,\\n\\t\\tpointerSize: 3,\\n\\t}\\n\\t// -\\n\\tclass Pointer {\\n\\t\\tconstructor( col) {\\n\\t\\t\\tthis.auto = true;\\n\\t\\t\\tthis.x = 0;\\n\\t\\t\\tthis.y = 0;\\n\\t\\t\\tthis.px = 0;\\n\\t\\t\\tthis.py = 0;\\n\\t\\t}\\n\\n\\t\\tgetColor() {\\n\\t\\t\\treturn this.colors[this.c];\\n\\t\\t}\\n\\n\\t\\tclearTimer() {\\n\\t\\t\\tif( this.timer ) {\\n\\t\\t\\t\\tclearTimeout( this.timer );\\n\\t\\t\\t\\tthis.timer = null;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// -\\n\\tconst pointers = [];\\n\\tpointers.push( new Pointer(0) );\\n\\tpointers.push( new Pointer(1) );\\n\\n\\t// -\\n\\tlet waitingPreview = false;\\n\\n\\t\\n\\t// -\\n\\tlet color0, color1;\\n\\tconst dt = 1 / 60;\\n\\n\\tfunction updateMousePosition(id, eX, eY, col) {\\n\\t\\tpointers[id].x = eX;\\n\\t\\tpointers[id].y = eY;\\n\\t\\tif( col !== undefined ) pointers[id].c = col;\\n\\t\\t//console.log( pointers[id].x, pointers[id].y );\\n\\t}\\n\\n\\tfunction render( positions, raf) {\\n\\t\\t// \\n\\t\\tif ( raf ){\\n\\t\\t\\tif( positions[0] ){\\n\\t\\t\\t\\tupdateMousePosition(\\n\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\tpositions[0].x * $win.w,\\n\\t\\t\\t\\t\\tpositions[0].y * $win.h,\\n\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\t// -\\n\\t\\t\\tif( positions[1] ){\\n\\t\\t\\t\\tupdateMousePosition(\\n\\t\\t\\t\\t\\t1,\\n\\t\\t\\t\\t\\tpositions[1].x * $win.w,\\n\\t\\t\\t\\t\\tpositions[1].y * $win.h,\\n\\t\\t\\t\\t\\t1\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// -\\n\\t\\t\\tif(!positions[0] && !positions[1]){\\n\\t\\t\\t\\tupdateMousePosition(\\n\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t$win.w * 0.5,\\n\\t\\t\\t\\t\\t$win.h * 0.5,\\n\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tupdateMousePosition(\\n\\t\\t\\t\\t\\t1,\\n\\t\\t\\t\\t\\t$win.w * 0.5,\\n\\t\\t\\t\\t\\t$win.h * 0.5,\\n\\t\\t\\t\\t\\t1\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tparams.vel = params.minVel;\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tparams.vel = params.maxVel;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// - Easing\\n\\t\\t\\tpointers[0].px += (pointers[0].x - pointers[0].px ) * params.vel;\\n\\t\\t\\tpointers[0].py += (pointers[0].y - pointers[0].py ) * params.vel;\\n\\t\\t\\t// -\\n\\t\\t\\tpointers[1].px += (pointers[1].x - pointers[1].px ) * params.vel;\\n\\t\\t\\tpointers[1].py += (pointers[1].y - pointers[1].py ) * params.vel;\\n\\t\\t\\t// -\\n\\n\\t\\t\\t// - console.log( distance, pointers[0].x, pointers[0].y, pointers[1].x, pointers[1].y );\\n\\t\\t\\t//drawCanvas();\\n\\t\\t\\t// -\\n\\t\\t\\tupdateVideo();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction drawCanvas() {\\n\\t\\tcanvasCtx.clearRect(0, 0, $win.w, $win.h);\\n\\t\\t// -\\n\\t\\tcanvasCtx.fillStyle = 'rgba(255,255,0,1)';\\n\\t\\tcanvasCtx.beginPath();\\n\\t\\tcanvasCtx.arc(pointers[0].px, pointers[0].py, params.pointerSize, 0, 2 * Math.PI);\\n\\t\\tcanvasCtx.fill();\\n\\n\\t\\tcanvasCtx.fillStyle = 'rgba(0,255,255,1)';\\n\\t\\tcanvasCtx.beginPath();\\n\\t\\tcanvasCtx.arc(pointers[1].px, pointers[1].py, params.pointerSize, 0, 2 * Math.PI);\\n\\t\\tcanvasCtx.fill();\\n\\t\\t// -\\n\\t\\tcanvasCtx.strokeStyle = 'rgba(255,255,255,1)';\\n\\t\\tcanvasCtx.beginPath();\\n\\t\\tcanvasCtx.moveTo(pointers[0].px, pointers[0].py);\\n\\t\\tcanvasCtx.lineTo(pointers[1].px, pointers[1].py);\\n\\t\\tcanvasCtx.stroke();\\t\\n\\t}\\n\\n\\tfunction resizeCanvas() {\\n\\t\\t//params.pointerSize = 1.7 / window.innerHeight;\\n\\t\\tcanvasEl.width = $win.w;\\n\\t\\tcanvasEl.height = $win.h;\\n\\t\\t// -\\n\\t\\tposition = {\\n\\t\\t\\tx: $win.w * 0.5,\\n\\t\\t\\ty: $win.h * 0.5\\n\\t\\t}\\n\\t}\\n\\n\\tfunction clamp(value, min, max) {\\n\\t\\treturn Math.max(min, Math.min(value, max));\\n\\t}\\n\\n\\tfunction updateVideo() {\\n\\t\\tposition = params.translate ? {\\n\\t\\t\\tx: pointers[1].px + ((pointers[0].px - pointers[1].px) * 0.5),\\n\\t\\t\\ty: pointers[1].py + ((pointers[0].py - pointers[1].py) * 0.5)\\n\\t\\t} : {\\n\\t\\t\\tx: $win.w * 0.4,\\n\\t\\t\\ty: $win.h * 0.4\\n\\t\\t}\\n\\t\\trotation = params.rotate ? Math.atan2( pointers[0].py - pointers[1].py, pointers[0].px - pointers[1].px ) * 0.5 : 0;\\n\\t\\t// -\\n\\t\\tconst distance = Math.sqrt( Math.pow( pointers[0].x - pointers[1].x, 2 ) + Math.pow( pointers[0].y - pointers[1].y, 2 ) );\\n\\t\\tconst normalizedDistance = (distance - minDistance) / (maxDistance - minDistance);\\n\\t\\tframePercent = clamp(normalizedDistance, 0, 1);\\n\\n\\n\\t\\tif( sound.playing() ){\\n\\t\\t\\tsound.pause();\\n\\t\\t}\\n\\t\\tvolume -= 0.1;\\n\\n\\t\\tconst newFrame = Math.round( framePercent * totalFrames );\\n\\t\\tif( newFrame !== frame ) {\\n\\t\\t\\tframe = newFrame;\\n\\t\\t\\t// -\\n\\t\\t\\tvolume += 0.3;\\n\\t\\t\\tsound.seek([soundDuration * framePercent], 0);\\n\\t\\t\\tif( !sound.playing() ){\\n\\t\\t\\t\\tsound.play();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvolume = clamp( volume, 0, 1 );\\n\\t\\tsound.volume( volume * 5 );\\n\\t}\\n\\n\\tfunction setupEvents() {\\n\\t\\tcanvasEl.addEventListener(\\"mousemove\\", (e) => {\\n\\t\\t\\tif( e.pageX + e.pageY > 0 ){\\t\\n\\t\\t\\t\\t//console.log(e.pageX, e.pageY);\\n\\t\\t\\t\\tupdateMousePosition(0, e.pageX, e.pageY);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tcanvasEl.addEventListener(\\"touchmove\\", (e) => {\\n\\t\\t\\te.preventDefault();\\n\\t\\t\\tupdateMousePosition(0, e.targetTouches[0].pageX, e.targetTouches[0].pageY);\\n\\t\\t});\\n\\t}\\n\\n\\tfunction createControls() {\\n\\t\\tconst pane = new Pane();\\n\\t\\t\\n\\t\\tpane.addBinding( params, \\"rotate\\");\\n\\t\\tpane.addBinding( params, \\"translate\\");\\n\\t\\tpane.addBinding( params, \\"vel\\", { min: 0, max: 1, step: 0.01 });\\n\\t\\t//pane.addBinding( params, \\"pointerSize\\", { min: 1, max: 10, step: 0.1 });\\n\\t}\\n\\n\\t\\n\\t// -\\n\\tonMount(() => {\\n\\t\\t//createControls();\\n\\t\\t// -\\n\\t\\tcanvasCtx = canvasEl.getContext(\\"2d\\");\\n\\t\\t// -\\n\\t\\tsound = new Howl({\\n\\t\\t\\tsrc: ['audio/11L-unfold_metallic_leat-1752499582973.mp3'],\\n\\t\\t\\tautoplay: false,\\n\\t\\t\\tloop: false,\\n\\t\\t\\tvolume: 1,\\n\\t\\t\\tonload: function() {\\n\\t\\t\\t\\tsoundDuration = sound.duration();\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tsetupEvents();\\n\\t\\tresizeCanvas();\\n\\t\\t\\n\\t\\t// - raf = requestAnimationFrame( render );\\n\\t});\\n\\n\\tonDestroy(() => {\\n\\t\\tstopRecognition();\\n\\t});\\n\\n<\/script>\\n\\n<svelte:window on:resize='{resizeCanvas}'/>\\n\\n<WebcamVideo bind:webCamElem active=\\"{isWebcamEnabled}\\"></WebcamVideo><canvas bind:this=\\"{canvasEl}\\" width=\\"{$win.w}\\" height=\\"{$win.h}\\"></canvas><div class=\\"video-container\\" style=\\"--rotation: {rotation}rad; --pos-x: {position.x}px; --pos-y: {position.y}px\\"><div class=\\"sequence\\"><ImageSequence bind:sequenceElem src=\\"img/metallic/ezgif-frame-[000].webp\\" total=\\"{totalFrames}\\" frame=\\"{frame}\\"></ImageSequence></div></div>{#if !isWebcamEnabled}<div id=\\"enable-webcam\\" on:click=\\"{() => (isWebcamEnabled = true)}\\"><div class=\\"button\\" bind:this=\\"{buttonElem}\\">Enable webcam</div></div>{/if}\\n\\n\\n<style lang=\\"stylus\\">:root{--black:#181818;--black2:#4b4b4b;--white:#f7f7f7}canvas{background-color:transparent;height:100vh;height:-webkit-fill-available;left:0;top:0;width:100vw;z-index:3}.video-container,canvas{pointer-events:none;position:absolute}.video-container{--rotation:0deg;box-shadow:4px 4px 40px 0 rgba(0,0,0,.1),4px 11px 10px 0 rgba(0,0,0,.1);height:50vh;left:var(--pos-x);overflow:hidden;top:var(--pos-y);transform:translate(-50%,-50%);width:50vh;z-index:2}.video-container .sequence{position:absolute;--pos-x:20%;--pos-y:20%;height:calc(100% + var(--pos-y)*2);left:calc(var(--pos-x)*-1);top:calc(var(--pos-y)*-1);transform:translate(-50%,-50%);transform:rotate(var(--rotation));transform-origin:50% 50%;width:calc(100% + var(--pos-x)*2)}#enable-webcam{align-items:center;-webkit-backdrop-filter:blur(50px);backdrop-filter:blur(50px);background-color:rgba(0,0,0,.5);cursor:pointer;display:flex;height:100vh;height:-webkit-fill-available;justify-content:center;left:0;pointer-events:auto;position:absolute;top:0;width:100vw;z-index:4}#enable-webcam .button{background-color:#ddd;border-radius:5px;color:#222;font-size:1.5rem;padding:10px 20px;transition:all .3s ease}#enable-webcam:hover .button{background-color:#fff;color:#222}</style>"],"names":[],"mappings":"AAqRqB,KAAK,CAAC,QAAQ,OAAO,CAAC,SAAS,OAAO,CAAC,QAAQ,OAAO,CAAC,oCAAM,CAAC,iBAAiB,WAAW,CAAC,OAAO,KAAK,CAAC,OAAO,sBAAsB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,QAAQ,CAAC,CAAC,8CAAgB,CAAC,oCAAM,CAAC,eAAe,IAAI,CAAC,SAAS,QAAQ,CAAC,8CAAgB,CAAC,WAAW,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,KAAK,IAAI,OAAO,CAAC,CAAC,SAAS,MAAM,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC,UAAU,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,CAAC,+BAAgB,CAAC,wBAAS,CAAC,SAAS,QAAQ,CAAC,QAAQ,GAAG,CAAC,QAAQ,GAAG,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,iBAAiB,GAAG,CAAC,GAAG,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,4CAAc,CAAC,YAAY,MAAM,CAAC,wBAAwB,KAAK,IAAI,CAAC,CAAC,gBAAgB,KAAK,IAAI,CAAC,CAAC,iBAAiB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,OAAO,CAAC,QAAQ,IAAI,CAAC,OAAO,KAAK,CAAC,OAAO,sBAAsB,CAAC,gBAAgB,MAAM,CAAC,KAAK,CAAC,CAAC,eAAe,IAAI,CAAC,SAAS,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,QAAQ,CAAC,CAAC,6BAAc,CAAC,sBAAO,CAAC,iBAAiB,IAAI,CAAC,cAAc,GAAG,CAAC,MAAM,IAAI,CAAC,UAAU,MAAM,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,6BAAc,MAAM,CAAC,sBAAO,CAAC,iBAAiB,IAAI,CAAC,MAAM,IAAI"}`
};
const totalFrames = 105;
const Scene = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $win, $$unsubscribe_win;
  $$unsubscribe_win = subscribe(win, (value) => $win = value);
  howler.Howl;
  let canvasEl = null;
  let webCamElem = null;
  let buttonElem = null;
  let isWebcamEnabled = false;
  let sequenceElem = null;
  let frame = 0;
  let rotation = 0;
  let position = { x: 0, y: 0 };
  onDestroy(() => {
    stopRecognition();
  });
  $$result.css.add(css$1);
  let $$settled;
  let $$rendered;
  let previous_head = $$result.head;
  do {
    $$settled = true;
    $$result.head = previous_head;
    $$rendered = ` ${validate_component(WebcamVideo, "WebcamVideo").$$render(
      $$result,
      { active: isWebcamEnabled, webCamElem },
      {
        webCamElem: ($$value) => {
          webCamElem = $$value;
          $$settled = false;
        }
      },
      {}
    )}<canvas${add_attribute("width", $win.w, 0)}${add_attribute("height", $win.h, 0)} class="svelte-1ilcoqd"${add_attribute("this", canvasEl, 0)}></canvas><div class="video-container svelte-1ilcoqd" style="${"--rotation: " + escape(rotation, true) + "rad; --pos-x: " + escape(position.x, true) + "px; --pos-y: " + escape(position.y, true) + "px"}"><div class="sequence svelte-1ilcoqd">${validate_component(ImageSequence, "ImageSequence").$$render(
      $$result,
      {
        src: "img/metallic/ezgif-frame-[000].webp",
        total: totalFrames,
        frame,
        sequenceElem
      },
      {
        sequenceElem: ($$value) => {
          sequenceElem = $$value;
          $$settled = false;
        }
      },
      {}
    )}</div></div>${`<div id="enable-webcam" class="svelte-1ilcoqd"><div class="button svelte-1ilcoqd"${add_attribute("this", buttonElem, 0)} data-svelte-h="svelte-tcg226">Enable webcam</div></div>`}`;
  } while (!$$settled);
  $$unsubscribe_win();
  return $$rendered;
});
const css = {
  code: ":root{--black:#181818;--black2:#4b4b4b;--white:#f7f7f7}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n\\timport {onMount} from 'svelte'\\n\\timport { win } from '$lib/store'\\n\\t// -\\n\\timport { Canvas } from '@threlte/core'\\n\\timport Scene from '$lib/Scene.svelte'\\n\\n<\/script>\\n\\n\\n<Scene></Scene>\\n\\n\\n<style lang=\\"stylus\\">:root{--black:#181818;--black2:#4b4b4b;--white:#f7f7f7}.canvas-wrapper{height:100vh;height:-webkit-fill-available;left:0;position:absolute;top:0;width:100vw}</style>"],"names":[],"mappings":"AAaqB,KAAK,CAAC,QAAQ,OAAO,CAAC,SAAS,OAAO,CAAC,QAAQ,OAAO"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css);
  return `${validate_component(Scene, "Scene").$$render($$result, {}, {}, {})}`;
});
export {
  Page as default
};
